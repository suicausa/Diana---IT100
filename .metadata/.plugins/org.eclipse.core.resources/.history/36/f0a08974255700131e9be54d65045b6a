/*
 * File: NameSurferGraph.java
 * ---------------------------
 * This class represents the canvas on which the graph of
 * names is drawn. This class is responsible for updating
 * (redrawing) the graphs whenever the list of entries changes or the window is resized.
 * 
 * Received help: https://github.com/NatashaTheRobot/Stanford-CS-106A/blob/master/Assignment6/NameSurferGraph.java
 */

import acm.graphics.*;
import java.awt.event.*;
import java.util.*;
import java.awt.*;

public class NameSurferGraph extends GCanvas
	implements NameSurferConstants, ComponentListener {

	/**
	* Creates a new NameSurferGraph object that displays the data.
	*/
	private ArrayList <NameSurferEntry> displayEntry;
	
	public NameSurferGraph() {
		addComponentListener(this);
		displayEntry = new ArrayList<NameSurferEntry>();
	}
	
	/**
	* Clears the list of name surfer entries stored inside this class.
	*/
	public void clear() {
		displayEntry.clear();
	}
	
	/**
	* Adds a new NameSurferEntry to the list of entries on the display.
	* Note that this method does not actually draw the graph, but
	* simply stores the entry; the graph is drawn by calling update.
	*/
	public void addEntry(NameSurferEntry entry) {
		displayEntry.add(entry);
	}
	
	/**
	* Updates the display image by deleting all the graphical objects
	* from the canvas and then reassembling the display according to
	* the list of entries. Your application must call update after
	* calling either clear or addEntry; update is also called whenever
	* the size of the canvas changes.
	*/
	public void update() {
		removeAll();
		drawGraph();
		if(displayEntry.size() >= 0) {
			for(int i = 0; i < displayEntry.size(); i++) {
				NameSurferEntry entries = displayEntry.get(i); 
				graphEntry(entries, i);
			}
		}
	}

	/* Implementation of the ComponentListener interface */
	public void componentHidden(ComponentEvent e) { }
	public void componentMoved(ComponentEvent e) { }
	public void componentResized(ComponentEvent e) { update(); }
	public void componentShown(ComponentEvent e) { }
	
	private void drawGraph() {
		gridLine();//draws vertical lines for the grid
		borderLine();
		dateLabel();//adds the years
	}
	
	private void gridLine() {
		for(int i = 0; i<NDECADES; i++) {
			double startY = 0;
			double lastY = getHeight();
			double x = i * (getWidth()/NDECADES);
			GLine line = new GLine(x, startY, x, lastY);
			add(line);
		}
	}
	
	private void borderLine() {
		double startX = 0;
		double lastX = getWidth();
		double topY = getHeight() - GRAPH_MARGIN_SIZE;
		GLine topLine = new GLine(startX, topY, lastX, topY);
		add(topLine);
		
		double bottomY = GRAPH_MARGIN_SIZE;
		GLine bottomLine = new GLine(startX, bottomY, lastX, bottomY);
		add(bottomLine);
	}
	
	private void dateLabel() {
		for(int i = 0; i<NDECADES; i++) {
			int dateYear = START_DECADE;
			dateYear += 10*i;
			String label = Integer.toString(dateYear);
			double y = getHeight() - GRAPH_MARGIN_SIZE/4;
			double x = 2 + i * (getWidth()/NDECADES);
			GLabel dateLabel = new GLabel(label, x, y);
			add(dateLabel);
		}
	}
	
	private void graphEntry(NameSurferEntry entry, int entryNumber) {
		
		for(int i = 0; i < NDECADES - 1; i++) {
			int ranking1 = entry.getRank(i);
			int ranking2 = entry.getRank(i+1);
			double startX = i * (getWidth()/NDECADES);
			double lastX = (i+1) * (getWidth()/NDECADES);
			double startY = 0;
			double lastY = 0;
			if(ranking1 != 0 && ranking2 != 0) {
				startY = GRAPH_MARGIN_SIZE + (getHeight() - GRAPH_MARGIN_SIZE*2) * ranking1/MAX_RANK;
				lastY = GRAPH_MARGIN_SIZE + (getHeight() - GRAPH_MARGIN_SIZE*2) * ranking2/MAX_RANK;
			}
			else if(ranking1 == 0 && ranking2 == 0) {
				startY = getHeight() - GRAPH_MARGIN_SIZE;
				lastY = getHeight() - GRAPH_MARGIN_SIZE;
			}
			else if (ranking1 == 0){
				startY = getHeight() - GRAPH_MARGIN_SIZE;
				lastY = GRAPH_MARGIN_SIZE + (getHeight() - GRAPH_MARGIN_SIZE*2) * ranking2/MAX_RANK;
			}
			else if(ranking2 == 0) {
				startY = GRAPH_MARGIN_SIZE + (getHeight() - GRAPH_MARGIN_SIZE*2) * ranking1/MAX_RANK;
				lastY = getHeight() - GRAPH_MARGIN_SIZE;
			}
			GLine line = new GLine(startX, startY, lastX, lastY);
			if(entryNumber%4 == 1) {
				line.setColor(Color.RED);
			}
			else if(entryNumber%4 == 2) {
				line.setColor(Color.BLUE);
			}
			else if(entryNumber%4 == 3) {
				line.setColor(Color.MAGENTA);
			}
			add(line);
		}
		
		for(int i = 0; i<NDECADES; i++) {
			String name = entry.getName();
			int rank = entry.getRank(i);
			String rankString = Integer.toString(rank);
			String label = name + " " + rankString;
			double x = i * (getWidth()/NDECADES) + 5;
			double y = 0;
			if(rank != 0) {
				y = GRAPH_MARGIN_SIZE + (getHeight() - GRAPH_MARGIN_SIZE*2) * rank/MAX_RANK - 5;
			}
			else{
				label = name + " *";
				y = getHeight() - GRAPH_MARGIN_SIZE - 5;
			}
			GLabel nameLabel = new GLabel(label, x, y);
			if(entryNumber%4 == 1) {
				nameLabel.setColor(Color.RED);
			}
			else if(entryNumber%4 == 2) {
				nameLabel.setColor(Color.BLUE);
			}
			else if(entryNumber%4 == 3) {
				nameLabel.setColor(Color.MAGENTA);
			}
			add(nameLabel);
		}
	}
}
